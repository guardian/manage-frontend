{"version":3,"file":"6393.ec9fa45e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAqBA;;;;;;;;;AAUA;;AAMA;;AAIA;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;;;;;;;;;;;;;;AAcA;AACA;;;;;;;;AAQA;AACA;;;;;;;;;;;AAWA;;;;;;AAMA;;;;AAMA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AACA;;AAGA;;;;;AAKA;;;AAGA;;;;ACnIA;ACKA;;;;AAKA;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;;;;;;;AAiBA;;;AAIA;;AAGA;;;;;AAKA;AACA;AACA;;;AAGA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;;;;;;;;;;AAWA;AACA;;;;;;;;;AAUA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;;;;AAIA","sources":["webpack://manage-frontend/./node_modules/@guardian/source-development-kitchen/dist/react-components/toggle-switch/styles.js","webpack://manage-frontend/./node_modules/@guardian/source-development-kitchen/dist/react-components/toggle-switch/ToggleSwitch.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/checkbox/styles.js"],"sourcesContent":["import { css } from '@emotion/react';\nimport { neutral, space, success, brand, textSans15, textSansBold15, textSans17, textSansBold17 } from '@guardian/source/foundations';\n\nconst toggleBackground = \"rgba(255, 255, 255, 0.4)\";\nconst toggleBorder = \"rgba(255, 255, 255, 0.6)\";\nconst toggleBorderGreen = \"#A7CFB8\";\nconst buttonStyles = css`\n\tflex: none;\n\tborder: none;\n\tmargin: 0;\n\tpadding: 0;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tposition: relative;\n\ttransition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n\tcursor: pointer;\n\n\t&:after {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tborder-radius: 50%;\n\t\tbackground: ${neutral[100]};\n\t\twill-change: left;\n\t\ttransition: left 0.15s ease-in-out;\n\t}\n\n\t:focus + .tooltiptext {\n\t\topacity: 1;\n\t\tvisibility: visible;\n\t}\n`;\nconst buttonStylesMargin = (labelPosition) => {\n  switch (labelPosition) {\n    case \"left\":\n      return css`\n\t\t\t\tmargin-left: 8px;\n\t\t\t`;\n    case \"right\":\n      return css`\n\t\t\t\tmargin-right: 8px;\n\t\t\t`;\n  }\n};\nconst toggleStyles = (format) => {\n  return css`\n\t\twidth: 44px;\n\t\theight: 22px;\n\t\tborder-radius: 16px;\n\t\tbox-sizing: unset;\n\n\t\t/* this will go away when resets have been standardised */\n\t\t&:before,\n\t\t&:after {\n\t\t\tbox-sizing: border-box;\n\t\t}\n\n\t\t&:before {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\ttop: 5px;\n\t\t\theight: 11px;\n\t\t\twidth: 6px;\n\t\t\tright: 8px;\n\t\t\topacity: 0;\n\t\t\tborder-bottom: 2px solid ${success[400]};\n\t\t\tborder-right: 2px solid ${success[400]};\n\t\t\ttransform: rotate(45deg);\n\t\t\ttransition-property: opacity;\n\t\t\ttransition-duration: 0.2s;\n\t\t}\n\n\t\t&:after {\n\t\t\theight: 18px;\n\t\t\twidth: 18px;\n\t\t\ttop: 2px;\n\t\t\tleft: 2px;\n\t\t}\n\n\t\t&[aria-checked='false'] {\n\t\t\tbackground-color: ${format ? toggleBackground : neutral[46]};\n\t\t\tborder: 1px solid ${format ? toggleBorder : neutral[46]};\n\t\t}\n\n\t\t&[aria-checked='false']:before {\n\t\t\ttransition-delay: 0;\n\t\t}\n\n\t\t&[aria-checked='true'] {\n\t\t\tbackground-color: ${success[400]};\n\t\t\tborder: 1px solid ${format ? toggleBorderGreen : success[400]};\n\t\t}\n\n\t\t&[aria-checked='true']:before {\n\t\t\topacity: 1;\n\t\t\tz-index: 1;\n\t\t\ttransition-delay: 0.2s;\n\t\t}\n\n\t\t&[aria-checked='true']:after {\n\t\t\tleft: 24px;\n\t\t\tbackground: ${neutral[100]};\n\t\t}\n\n\t\t&:focus {\n\t\t\toutline: 0;\n\t\t\thtml:not(.src-focus-disabled) & {\n\t\t\t\toutline: 5px solid ${format ? neutral[100] : brand[500]};\n\t\t\t\toutline-offset: 3px;\n\t\t\t}\n\t\t}\n\t`;\n};\nconst labelStyles = (fontSize, fontWeight, format) => css`\n\t${fontSize === \"small\" && (fontWeight === \"regular\" ? textSans15 : textSansBold15)};\n\t${fontSize === \"medium\" && (fontWeight === \"regular\" ? textSans17 : textSansBold17)};\n\tcolor: ${format ? neutral[100] : neutral[7]};\n\tdisplay: inline-flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tcursor: pointer;\n\tuser-select: none;\n\tposition: relative;\n`;\nconst labelBorderStyles = (format) => css`\n\tborder-top: 1px solid ${format ? neutral[100] : neutral[46]};\n\tpadding-top: ${space[1]}px;\n\twidth: 100%;\n`;\nconst tooltipStyles = css`\n\tposition: absolute;\n\tvisibility: hidden;\n\twidth: 248px;\n\ttop: 40px;\n\tbackground-color: ${neutral[100]};\n\tborder: 1px solid rgba(18, 18, 18, 0.25);\n\tborder-radius: 3px;\n\tpadding: ${space[2]};\n\tz-index: 1;\n\topacity: 0;\n\ttransition: 0.7s opacity;\n`;\n\nexport { buttonStyles, buttonStylesMargin, labelBorderStyles, labelStyles, toggleStyles, tooltipStyles };\n","import { jsxs, jsx } from '@emotion/react/jsx-runtime';\nimport { generateSourceId, descriptionId } from '@guardian/source/foundations';\nimport { useState, useEffect } from 'react';\nimport { labelStyles, labelBorderStyles, buttonStyles, buttonStylesMargin, toggleStyles, tooltipStyles } from './styles.js';\n\nconst ToggleSwitch = ({\n  checked,\n  id,\n  fontWeight = \"regular\",\n  fontSize = \"small\",\n  format,\n  label,\n  labelBorder = false,\n  labelPosition = \"right\",\n  defaultChecked,\n  cssOverrides,\n  onClick,\n  ...props\n}) => {\n  const buttonId = id ?? generateSourceId();\n  const labelId = descriptionId(buttonId);\n  const [isBrowser, setIsBrowser] = useState(false);\n  let tooltiptext = \"\";\n  const isChecked = () => {\n    if (checked != void 0) {\n      return checked;\n    }\n    return !!defaultChecked;\n  };\n  useEffect(() => {\n    setIsBrowser(true);\n  }, []);\n  if (!isBrowser) {\n    tooltiptext = \"tooltiptext\";\n  }\n  return /* @__PURE__ */ jsxs(\n    \"label\",\n    {\n      id: labelId,\n      css: [\n        labelStyles(fontSize, fontWeight, format),\n        labelBorder && labelBorderStyles(format),\n        cssOverrides\n      ],\n      ...props,\n      children: [\n        labelPosition === \"left\" && label,\n        /* @__PURE__ */ jsx(\n          \"button\",\n          {\n            id: buttonId,\n            css: [\n              buttonStyles,\n              buttonStylesMargin(labelPosition),\n              toggleStyles(format)\n            ],\n            role: \"switch\",\n            \"aria-checked\": isChecked(),\n            \"aria-labelledby\": labelId,\n            onClick\n          }\n        ),\n        labelPosition === \"right\" && label,\n        /* @__PURE__ */ jsx(\"div\", { className: tooltiptext, css: tooltipStyles, children: /* @__PURE__ */ jsx(\"span\", { children: \"Please turn on JavaScript to use this feature\" }) })\n      ]\n    }\n  );\n};\n\nexport { ToggleSwitch };\n","import { css } from '@emotion/react';\nimport { resets } from '../../foundations/utils/resets.js';\nimport { height, width } from '../../foundations/__generated__/size.js';\nimport { space } from '../../foundations/__generated__/space.js';\nimport { transitions } from '../../foundations/animation/transitions.js';\nimport { focusHalo } from '../../foundations/accessibility/focus-halo.js';\nimport { appearance } from '../../foundations/utils/supports-queries.js';\nimport { textSans24, textSans17, textSans15 } from '../../foundations/__generated__/typography.js';\n\nconst fieldset = css`\n\t${resets.fieldset};\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex-direction: column;\n`;\nconst checkboxContainer = (checkbox2, error = false) => css`\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: flex-start;\n\t/**\n\t * Ensure minimum height of 44px by applying 10px padding to top and bottom\n\t * of container. This ensures consistent spacing when supporting text present.\n\t */\n\tpadding: ${(height.inputMedium - height.inputXsmall) / 2}px 0;\n\tcursor: pointer;\n\n\t&:hover {\n\t\tinput {\n\t\t\tborder: ${error ? `2px solid ${checkbox2.borderError}` : `2px solid ${checkbox2.borderHover}`};\n\t\t\t/*\n\t\t\t\tIn the indeterminate state, we increase the border width by 1px on\n\t\t\t\thover. This causes the position of the indeterminate dash to shift as it\n\t\t\t\tis absolutely positioned. This negative margin accounts for the extra\n\t\t\t\tborder width and prevents the shift. We need to locate this css here as\n\t\t\t\tthe hover sits on the container, rather than the input element.\n\t\t\t*/\n\t\t\t&:indeterminate {\n\t\t\t\t&:after {\n\t\t\t\t\tmargin: -1px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t&:active {\n\t\tinput {\n\t\t\tborder-color: ${checkbox2.borderHover};\n\t\t}\n\t}\n`;\nconst label = css`\n\tcursor: pointer;\n`;\nconst checkbox = (checkbox2, error = false) => css`\n\tflex: 0 0 auto;\n\tbox-sizing: border-box;\n\tdisplay: inline-block;\n\tcursor: pointer;\n\twidth: ${width.inputXsmall}px;\n\theight: ${height.inputXsmall}px;\n\tmargin: 0 ${space[2]}px 0 0;\n\n\tborder: 1px solid currentColor;\n\tbackground: ${checkbox2.fillUnselected};\n\tborder-radius: 4px;\n\tposition: relative;\n\ttransition: box-shadow ${transitions.short};\n\ttransition-delay: 0.08s;\n\tcolor: ${checkbox2.borderUnselected};\n\n\t&:focus {\n\t\t${focusHalo};\n\t}\n\n\t@supports (${appearance}) {\n\t\tappearance: none;\n\t\t&:checked {\n\t\t\tborder: ${error ? `2px solid ${checkbox2.borderError}` : `2px solid ${checkbox2.borderSelected}`};\n\t\t\t& ~ span:before {\n\t\t\t\tright: 0;\n\t\t\t}\n\t\t\t& ~ span:after {\n\t\t\t\ttop: 0;\n\t\t\t}\n\t\t}\n\n\t\t&:indeterminate {\n\t\t\t&:after {\n\t\t\t\t${textSans24};\n\t\t\t\tcolor: ${checkbox2.textIndeterminate};\n\t\t\t\tcontent: '-';\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: -7px;\n\t\t\t\tleft: 6px;\n\t\t\t\tz-index: 5;\n\t\t\t}\n\t\t}\n\t}\n`;\nconst labelText = (checkbox2) => css`\n\t${textSans17};\n\tcolor: ${checkbox2.textLabel};\n\twidth: 100%;\n\tmargin-top: 1px;\n\t/* If label text is empty, add additional spacing to align supporting text */\n\t&:empty {\n\t\tmargin-top: 2px;\n\t}\n`;\nconst supportingText = (checkbox2) => css`\n\t${textSans15};\n\tcolor: ${checkbox2.textSupporting};\n`;\nconst tick = (checkbox2) => css`\n\t@supports (\n\t\t(appearance: none) or (-webkit-appearance: none) or (-moz-appearance: none)\n\t) {\n\t\t/* overall positional properties */\n\t\tposition: absolute;\n\t\twidth: 6px;\n\t\theight: 12px;\n\t\ttransform: rotate(45deg);\n\t\ttop: 15px;\n\t\tleft: 9px;\n\t\t/**\n\t\t * This prevents simulated click events to the checkbox (eg. from Selenium\n\t\t * tests) being intercepted by the tick\n\t\t */\n\t\tpointer-events: none;\n\n\t\t/* the checkmark ✓ */\n\t\t&:after,\n\t\t&:before {\n\t\t\tposition: absolute;\n\t\t\tdisplay: block;\n\t\t\tbackground-color: ${checkbox2.fillSelected};\n\t\t\ttransition: all ${transitions.short} ease-in-out;\n\t\t\tcontent: '';\n\t\t}\n\n\t\t/* the short side */\n\t\t&:before {\n\t\t\theight: 2px;\n\t\t\tbottom: 0;\n\t\t\tleft: 0;\n\t\t\tright: 100%;\n\t\t\ttransition-delay: 0.05s;\n\t\t}\n\n\t\t/* the long side */\n\t\t&:after {\n\t\t\tbottom: 0;\n\t\t\tright: 0;\n\t\t\ttop: 100%;\n\t\t\twidth: 2px;\n\t\t\ttransition-delay: 0.1s;\n\t\t}\n\t}\n`;\nconst errorCheckbox = (checkbox2) => css`\n\tborder: 2px solid ${checkbox2.borderError};\n\tborder-radius: 4px;\n\t&:not(:checked):hover,\n\t&:active {\n\t\tborder: 2px solid ${checkbox2.borderHover};\n\t}\n`;\n\nexport { checkbox, checkboxContainer, errorCheckbox, fieldset, label, labelText, supportingText, tick };\n"],"names":[],"sourceRoot":""}