{"version":3,"file":"components-mma-accountoverview-AccountOverview-stories.562e03cd.iframe.bundle.js","mappings":";AAIA;;AAEA;;AAGA;;;;;AAKA;AACA;AACA;;AAGA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;;ACOA;AAEA;ACAA;AAEA;ACNA;AAEA;;AC5BA;;;AASA;AACA;;AAEA;;;AAPA;;;ACKA;ACPA;;;AAGA;;;;AAIA;;;AAIA;;;;;;;;AAQA;;;;;AAKA;;;AAIA;;AAGA;;;;;AAKA;AACA;AACA;;;;;AAKA;;;AAGA;;;AAGA;AACA;;;;AAIA;;;;;;;;;AASA;;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;;AAUA;AACA;AACA;;;;;;;AAQA;AACA;AACA","sources":["webpack://manage-frontend/./node_modules/@guardian/source-development-kitchen/dist/react-components/summary/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/__generated__/icons/SvgCrossRoundFilled.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/__generated__/icons/SvgGift.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/__generated__/icons/SvgInfoRound.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/inline/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/inline/Inline.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/radio/styles.js"],"sourcesContent":["import { css } from '@emotion/react';\nimport { space, textSans17, size, textSansBold17 } from '@guardian/source/foundations';\n\nconst wrapperStyles = (color) => css`\n\tborder: 2px solid ${color};\n\tborder-radius: 4px;\n\tpadding: ${space[1]}px;\n\tdisplay: flex;\n`;\nconst iconStyles = (color) => css`\n\tdisplay: flex;\n\tflex: 0 1 auto;\n\tmargin-top: 1px;\n\tsvg {\n\t\tfill: ${color};\n\t\theight: ${size.xsmall}px;\n\t\twidth: ${size.xsmall}px;\n\t}\n`;\nconst messageStyles = (color, isBold = true) => css`\n\t${isBold ? textSansBold17 : textSans17};\n\tline-height: 1.4;\n\tcolor: ${color};\n`;\nconst messageWrapperStyles = css`\n\tmargin-left: ${space[1]}px;\n`;\nconst contextStyles = css`\n\t${textSans17};\n`;\n\nexport { contextStyles, iconStyles, messageStyles, messageWrapperStyles, wrapperStyles };\n","import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { visuallyHidden } from '../../../foundations/accessibility/visually-hidden.js';\nimport { iconSize } from '../../../foundations/__generated__/size.js';\n\nconst Svg = ({ size, theme }) => /* @__PURE__ */ jsx(\n  \"svg\",\n  {\n    width: size ? iconSize[size] : void 0,\n    height: void 0,\n    viewBox: \"-3 -3 30 30\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    focusable: false,\n    \"aria-hidden\": true,\n    children: /* @__PURE__ */ jsx(\n      \"path\",\n      {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10m5.138-14.358-.782-.78-4.349 3.982-4.364-3.967-.782.78L10.85 12l-3.988 4.342.782.781 4.364-3.967 4.35 3.982.781-.78L13.165 12z\",\n        fill: theme?.fill\n      }\n    )\n  }\n);\nconst SvgCrossRoundFilled = ({\n  size,\n  theme,\n  isAnnouncedByScreenReader = false\n}) => /* @__PURE__ */ jsxs(Fragment, { children: [\n  /* @__PURE__ */ jsx(Svg, { size, theme }),\n  isAnnouncedByScreenReader ? /* @__PURE__ */ jsx(\n    \"span\",\n    {\n      css: css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`,\n      children: \"Close\"\n    }\n  ) : \"\"\n] });\n\nexport { SvgCrossRoundFilled };\n","import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { visuallyHidden } from '../../../foundations/accessibility/visually-hidden.js';\nimport { iconSize } from '../../../foundations/__generated__/size.js';\n\nconst Svg = ({ size, theme }) => /* @__PURE__ */ jsxs(\n  \"svg\",\n  {\n    width: size ? iconSize[size] : void 0,\n    height: void 0,\n    viewBox: \"-3 -3 30 30\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    focusable: false,\n    \"aria-hidden\": true,\n    children: [\n      /* @__PURE__ */ jsx(\n        \"path\",\n        {\n          d: \"M5.91 3.763 8.21 1l3.78 4.498L15.77 1l2.299 2.763-3.881 2.21H19.5l1 1.106v5.637h-7.4v-6.19h-2.2v6.19H3.5V7.079l1-1.105h5.291z\",\n          fill: theme?.fill\n        }\n      ),\n      /* @__PURE__ */ jsx(\"path\", { d: \"M10.9 15H4v5.804L5.192 22H10.9z\", fill: theme?.fill }),\n      /* @__PURE__ */ jsx(\"path\", { d: \"M20 15h-6.9v7h5.521L20 20.787z\", fill: theme?.fill })\n    ]\n  }\n);\nconst SvgGift = ({\n  size,\n  theme,\n  isAnnouncedByScreenReader = false\n}) => /* @__PURE__ */ jsxs(Fragment, { children: [\n  /* @__PURE__ */ jsx(Svg, { size, theme }),\n  isAnnouncedByScreenReader ? /* @__PURE__ */ jsx(\n    \"span\",\n    {\n      css: css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`,\n      children: \"Gift\"\n    }\n  ) : \"\"\n] });\n\nexport { SvgGift };\n","import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { visuallyHidden } from '../../../foundations/accessibility/visually-hidden.js';\nimport { iconSize } from '../../../foundations/__generated__/size.js';\n\nconst Svg = ({ size, theme }) => /* @__PURE__ */ jsx(\n  \"svg\",\n  {\n    width: size ? iconSize[size] : void 0,\n    height: void 0,\n    viewBox: \"-3 -3 30 30\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    focusable: false,\n    \"aria-hidden\": true,\n    children: /* @__PURE__ */ jsx(\n      \"path\",\n      {\n        d: \"M12 2C6.467 2 2 6.467 2 12s4.467 10 10 10 10-4.467 10-10S17.533 2 12 2m1.133 13.933v.49c-.11.088-.266.155-.422.244a13 13 0 0 1-.511.2 2.4 2.4 0 0 1-.533.133 4 4 0 0 1-.511.044c-.356 0-.578-.066-.712-.2a.58.58 0 0 1-.222-.444c0-.178.022-.356.045-.533.022-.178.066-.356.11-.578l.934-4.245-.867-.2v-.466c.134-.045.312-.111.556-.178.222-.067.467-.111.733-.156.267-.044.511-.088.756-.11.244-.023.467-.045.667-.045l.244.155-1.244 5.89zm.423-7.466c-.2.177-.49.266-.823.266q-.465 0-.8-.266a.88.88 0 0 1-.31-.69c0-.31.11-.555.31-.733q.3-.266.8-.266c.356 0 .623.089.823.266s.31.423.31.734c-.022.289-.11.51-.31.689\",\n        fill: theme?.fill\n      }\n    )\n  }\n);\nconst SvgInfoRound = ({\n  size,\n  theme,\n  isAnnouncedByScreenReader = false\n}) => /* @__PURE__ */ jsxs(Fragment, { children: [\n  /* @__PURE__ */ jsx(Svg, { size, theme }),\n  isAnnouncedByScreenReader ? /* @__PURE__ */ jsx(\n    \"span\",\n    {\n      css: css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`,\n      children: \"Information\"\n    }\n  ) : \"\"\n] });\n\nexport { SvgInfoRound };\n","import { css } from '@emotion/react';\nimport { until } from '../../foundations/mq/mq.js';\nimport { space } from '../../foundations/__generated__/space.js';\n\nconst inline = css`\n\toverflow: hidden;\n`;\nconst inlineWrapper = css`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n`;\nconst collapseBreakpoint = (breakpoint) => css`\n\t${until[breakpoint]} {\n\t\tflex-direction: column;\n\t}\n`;\nconst inlineSpace = (number) => css`\n\tmargin: -${space[number] / 2}px;\n\t> * {\n\t\tmargin: ${space[number] / 2}px;\n\t}\n`;\n\nexport { collapseBreakpoint, inline, inlineSpace, inlineWrapper };\n","import { jsx } from '@emotion/react/jsx-runtime';\nimport { inline, inlineWrapper, inlineSpace, collapseBreakpoint } from './styles.js';\nimport { isUndefined } from '../../libs/dist/isUndefined/isUndefined.js';\n\nconst Inline = ({\n  cssOverrides,\n  children,\n  space,\n  collapseUntil,\n  ...props\n}) => {\n  return /* @__PURE__ */ jsx(\"div\", { css: inline, children: /* @__PURE__ */ jsx(\n    \"div\",\n    {\n      css: [\n        inlineWrapper,\n        isUndefined(space) ? \"\" : inlineSpace(space),\n        collapseUntil ? collapseBreakpoint(collapseUntil) : \"\",\n        cssOverrides\n      ],\n      ...props,\n      children\n    }\n  ) });\n};\n\nexport { Inline };\n","import { css } from '@emotion/react';\nimport { resets } from '../../foundations/utils/resets.js';\nimport { width, height } from '../../foundations/__generated__/size.js';\nimport { space } from '../../foundations/__generated__/space.js';\nimport { transitions } from '../../foundations/animation/transitions.js';\nimport { focusHalo } from '../../foundations/accessibility/focus-halo.js';\nimport { appearance } from '../../foundations/utils/supports-queries.js';\nimport { textSans17, textSans15 } from '../../foundations/__generated__/typography.js';\n\nconst fieldset = (radio2) => css`\n\t${resets.fieldset};\n\n\t&[aria-invalid='true'] input {\n\t\tborder: 2px solid ${radio2.borderError};\n\n\t\t&:not(:checked):hover,\n\t\t&:active {\n\t\t\tborder: 2px solid ${radio2.borderHover};\n\t\t}\n\t}\n`;\nconst radioContainer = (radio2) => css`\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: flex-start;\n\t/**\n\t * Ensure minimum height of 44px by applying 10px padding to top and bottom\n\t * of container. This ensures consistent spacing when supporting text present.\n\t */\n\tpadding: ${(height.inputMedium - height.inputXsmall) / 2}px 0;\n\tcursor: pointer;\n\n\t&:hover {\n\t\tinput {\n\t\t\tborder: 2px solid ${radio2.borderHover};\n\t\t}\n\t}\n`;\nconst label = css`\n\tcursor: pointer;\n`;\nconst radio = (radio2) => css`\n\tflex: 0 0 auto;\n\tcursor: pointer;\n\tbox-sizing: border-box;\n\tdisplay: inline-block;\n\twidth: ${width.inputXsmall}px;\n\theight: ${height.inputXsmall}px;\n\tmargin: 0 ${space[2]}px 0 0;\n\n\tborder: 1px solid currentColor;\n\tborder-radius: 50%;\n\tposition: relative;\n\ttransition: box-shadow ${transitions.short};\n\ttransition-delay: 0.08s;\n\n\tcolor: ${radio2.borderUnselected};\n\n\t&:checked {\n\t\tborder: 2px solid ${radio2.borderSelected};\n\t\tcolor: ${radio2.fillSelected};\n\t}\n\n\t&:focus {\n\t\t${focusHalo};\n\t}\n\n\t/*\n\tTake care: Emotion extracts @supports blocks and moves them below\n\tall other <style> elements, making these values hard to override.\n\tI have chosen to keep these styles in the @supports block as\n\tmoving them out makes radio buttons look horrible on older browsers\n\t*/\n\t@supports (${appearance}) {\n\t\tappearance: none;\n\t\tbackground-color: ${radio2.fillUnselected};\n\n\t\t&:after {\n\t\t\tbackground: currentColor;\n\t\t\tposition: absolute;\n\t\t\tcontent: '';\n\t\t\ttop: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tleft: 0;\n\t\t\tborder-radius: 50%;\n\t\t\ttransform: scale(0);\n\t\t\ttransform-origin: center;\n\t\t\ttransition: transform ${transitions.short};\n\t\t}\n\n\t\t&:checked {\n\t\t\t&:after {\n\t\t\t\ttransform: scale(0.6);\n\t\t\t}\n\t\t}\n\t}\n`;\nconst labelText = (radio2) => css`\n\t${textSans17};\n\tcolor: ${radio2.textLabel};\n\twidth: 100%;\n\tmargin-top: 1px;\n\t/* If label text is empty, add additional spacing to align supporting text */\n\t&:empty {\n\t\tmargin-top: 2px;\n\t}\n`;\nconst supportingText = (radio2) => css`\n\t${textSans15};\n\tcolor: ${radio2.textSupporting};\n`;\n\nexport { fieldset, label, labelText, radio, radioContainer, supportingText };\n"],"names":[],"sourceRoot":""}