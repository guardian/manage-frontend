{"version":3,"file":"1976.d92f5edb.iframe.bundle.js","mappings":";AAmCA;AAEA;ACzBA;AAEA;;;;;AAKA;;AAqBA;AACA;AACA;AAEA;;;;;;;;;AASA;;AAEA;;;AAGA;AAKA;;;;;;;AAOA;;;AAIA;AACA;AA0BA;;;;AAKA;AACA;AACA;AACA;AACA;;AAGA;;;;;;AAMA;;;;AAIA;AACA;;AAGA;AACA;;;AAGA;;;;;;AAMA;;;AAIA;AACA;;;AAGA;;AAGA;;;;;;AA3IA;ACeA;ACfA;AAEA;AFmEA;;;AAGA;;;;AAIA;;;;;AAKA;;;;;;;;;;AAbA;AAxCA;AACA;AAFA;AGzBA;AAEA;AHUA;AACA;;;;;;;;;AASA;;AG0BA;AHEA;AGsBA","sources":["webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/__generated__/icons/SvgChevronDownSingle.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/accordion/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/accordion/Accordion.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/accordion/AccordionRowNoJS.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/accordion/AccordionRow.js"],"sourcesContent":["import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { visuallyHidden } from '../../../foundations/accessibility/visually-hidden.js';\nimport { iconSize } from '../../../foundations/__generated__/size.js';\n\nconst Svg = ({ size, theme }) => /* @__PURE__ */ jsx(\n  \"svg\",\n  {\n    width: size ? iconSize[size] : void 0,\n    height: void 0,\n    viewBox: \"-3 -3 30 30\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    focusable: false,\n    \"aria-hidden\": true,\n    children: /* @__PURE__ */ jsx(\n      \"path\",\n      {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"m1 7.224 10.498 10.498h1.004L23 7.224l-.98-.954L12 14.708 1.98 6.27z\",\n        fill: theme?.fill\n      }\n    )\n  }\n);\nconst SvgChevronDownSingle = ({\n  size,\n  theme,\n  isAnnouncedByScreenReader = false\n}) => /* @__PURE__ */ jsxs(Fragment, { children: [\n  /* @__PURE__ */ jsx(Svg, { size, theme }),\n  isAnnouncedByScreenReader ? /* @__PURE__ */ jsx(\n    \"span\",\n    {\n      css: css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`,\n      children: \"Expand to show more\"\n    }\n  ) : \"\"\n] });\n\nexport { SvgChevronDownSingle };\n","import { css } from '@emotion/react';\nimport { remSpace, space } from '../../foundations/__generated__/space.js';\nimport { headlineBold17, textSansBold15 } from '../../foundations/__generated__/typography.js';\nimport { transitions } from '../../foundations/animation/transitions.js';\nimport { from, until } from '../../foundations/mq/mq.js';\nimport { focusHalo } from '../../foundations/accessibility/focus-halo.js';\nimport { visuallyHidden } from '../../foundations/accessibility/visually-hidden.js';\n\nconst accordion = (accordion2) => css`\n\tborder-bottom: 1px solid ${accordion2.border};\n`;\nconst accordionRow = (accordion2) => css`\n\tborder-top: 1px solid ${accordion2.border};\n`;\nconst buttonStyles = css`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: ${remSpace[1]} 0 ${remSpace[5]} 0;\n\tcursor: pointer;\n`;\nconst button = (accordion2) => css`\n\t${buttonStyles};\n\tcolor: ${accordion2.textCta};\n\n\t/* user agent overrides */\n\tbackground: none;\n\toutline: none;\n\tborder: none;\n\ttext-align: left;\n\n\t&:focus div {\n\t\t${focusHalo};\n\t}\n`;\nconst noJsButton = (accordion2) => css`\n\t${buttonStyles};\n\tcolor: ${accordion2.textCta};\n`;\nconst labelText = css`\n\t${headlineBold17};\n\tmargin-right: ${remSpace[4]};\n`;\nconst expandedBodyStyles = (accordion2) => css`\n\t/*\n\tTODO:\n\tHardcoded max-height because auto is invalid.\n\tIf content is longer, we'll need to set overflow: auto\n\tbut only after max-height has been reached.\n\tOtherwise, for short content we'll always see a flash\n\tof a scrollbar as the row height is transitioning\n\t*/\n\tcolor: ${accordion2.textBody};\n\tmax-height: 500px;\n\ttransition: max-height ${transitions.medium};\n\toverflow: hidden;\n\theight: auto;\n\tpadding-bottom: ${remSpace[5]};\n`;\nconst expandedBody = (accordion2) => css`\n\t${expandedBodyStyles(accordion2)};\n`;\nconst collapsedBodyStyles = css`\n\tmax-height: 0;\n\t/*\n\tTODO:\n\tThis transition is being ignored as the hidden\n\tattribute is applied immediately\n\n\ttransition: max-height ${transitions.short};\n\t*/\n\toverflow: hidden;\n`;\nconst collapsedBody = css`\n\t${collapsedBodyStyles};\n`;\nconst noJsInput = (accordion2) => css`\n\t${visuallyHidden};\n\n\t&:focus + [data-target='label'] > [data-target='toggle'] {\n\t\t${focusHalo};\n\t}\n\n\t&:not(:checked) ~ [data-target='body'] {\n\t\t${collapsedBodyStyles};\n\t\tdisplay: none;\n\t}\n\n\t&:checked ~ [data-target='body'] {\n\t\t${expandedBodyStyles(accordion2)};\n\t}\n\n\t&:not(:checked) + [data-target='label'] [data-target='toggle-label-hide'] {\n\t\tdisplay: none;\n\t}\n\n\t&:checked + [data-target='label'] [data-target='toggle-label-show'] {\n\t\tdisplay: none;\n\t}\n`;\nconst toggle = css`\n\twidth: auto;\n\tdisplay: flex;\n\talign-items: center;\n`;\nconst toggleLabel = (accordion2) => css`\n\t${textSansBold15};\n\tcolor: ${accordion2.textLabel};\n\t${until.tablet} {\n\t\t${visuallyHidden}\n\t}\n`;\nconst chevronIcon = css`\n\tsvg {\n\t\t/* TODO: think about icon sizing */\n\t\twidth: 18px;\n\t\theight: 18px;\n\n\t\t${from.tablet} {\n\t\t\twidth: 26px;\n\t\t\theight: 26px;\n\t\t}\n\t\tmargin-left: ${remSpace[1]};\n\t\ttransition: ${transitions.short};\n\t}\n`;\nconst chevronIconDown = css`\n\t${chevronIcon};\n\tsvg {\n\t\ttransform: translate(0, 0);\n\t\ttransition: transform ${transitions.short};\n\t}\n\n\t&:hover,\n\t&:focus {\n\t\tsvg {\n\t\t\ttransform: translate(0, ${space[1] / 2}px);\n\t\t}\n\t}\n`;\nconst chevronIconUp = css`\n\t${chevronIcon};\n\tsvg {\n\t\ttransform: rotate(180deg);\n\t\ttransition: transform ${transitions.short};\n\t}\n`;\nconst toggleIconWithLabel = css`\n\tsvg {\n\t\twidth: 18px;\n\t\theight: 18px;\n\t}\n`;\n\nexport { accordion, accordionRow, button, chevronIconDown, chevronIconUp, collapsedBody, collapsedBodyStyles, expandedBody, labelText, noJsButton, noJsInput, toggle, toggleIconWithLabel, toggleLabel };\n","import { jsx } from '@emotion/react/jsx-runtime';\nimport { Children, cloneElement } from 'react';\nimport { mergeThemes } from '../utils/themes.js';\nimport { accordion } from './styles.js';\nimport { transformProviderTheme, themeAccordion } from './theme.js';\n\nconst Accordion = ({\n  hideToggleLabel = false,\n  children,\n  cssOverrides,\n  theme,\n  ...props\n}) => {\n  const mergedTheme = (providerTheme) => mergeThemes(\n    themeAccordion,\n    theme,\n    providerTheme,\n    transformProviderTheme\n  );\n  return /* @__PURE__ */ jsx(\n    \"div\",\n    {\n      css: (providerTheme) => [\n        accordion(mergedTheme(providerTheme.accordion)),\n        cssOverrides\n      ],\n      ...props,\n      children: Children.map(children, (child) => {\n        return cloneElement(child, { hideToggleLabel });\n      })\n    }\n  );\n};\n\nexport { Accordion };\n","import { jsx, jsxs } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { SvgChevronDownSingle } from '../__generated__/icons/SvgChevronDownSingle.js';\nimport { mergeThemes } from '../utils/themes.js';\nimport { accordionRow, noJsInput, noJsButton, labelText, toggle, chevronIconDown, toggleIconWithLabel, toggleLabel, chevronIconUp, collapsedBody } from './styles.js';\nimport { transformProviderTheme, themeAccordion } from './theme.js';\nimport { visuallyHidden as visuallyHidden$1 } from '../../foundations/accessibility/visually-hidden.js';\n\nconst visuallyHidden = css`\n\t${visuallyHidden$1}\n`;\nconst AccordionRowNoJS = ({\n  label,\n  hideToggleLabel = false,\n  children,\n  cssOverrides,\n  theme,\n  ...props\n}) => {\n  const mergedTheme = (providerTheme) => mergeThemes(\n    themeAccordion,\n    theme,\n    providerTheme,\n    transformProviderTheme\n  );\n  return /* @__PURE__ */ jsx(\n    \"div\",\n    {\n      css: (providerTheme) => [\n        accordionRow(mergedTheme(providerTheme.accordion)),\n        cssOverrides\n      ],\n      ...props,\n      children: /* @__PURE__ */ jsxs(\"label\", { children: [\n        /* @__PURE__ */ jsx(\n          \"input\",\n          {\n            type: \"checkbox\",\n            css: (providerTheme) => noJsInput(mergedTheme(providerTheme.accordion)),\n            role: \"button\"\n          }\n        ),\n        /* @__PURE__ */ jsxs(\n          \"div\",\n          {\n            css: (providerTheme) => noJsButton(mergedTheme(providerTheme.accordion)),\n            \"data-target\": \"label\",\n            children: [\n              /* @__PURE__ */ jsx(\"strong\", { css: labelText, children: label }),\n              /* @__PURE__ */ jsxs(\"div\", { \"data-target\": \"toggle\", children: [\n                /* @__PURE__ */ jsxs(\n                  \"div\",\n                  {\n                    css: [\n                      toggle,\n                      chevronIconDown,\n                      !hideToggleLabel ? toggleIconWithLabel : \"\"\n                    ],\n                    \"data-target\": \"toggle-label-show\",\n                    children: [\n                      /* @__PURE__ */ jsxs(\n                        \"span\",\n                        {\n                          css: (providerTheme) => [\n                            toggleLabel(mergedTheme(providerTheme.accordion)),\n                            hideToggleLabel ? visuallyHidden : \"\"\n                          ],\n                          children: [\n                            \"Show\",\n                            /* @__PURE__ */ jsx(\"span\", { css: visuallyHidden, children: \" more\" })\n                          ]\n                        }\n                      ),\n                      /* @__PURE__ */ jsx(SvgChevronDownSingle, { theme: { fill: theme?.iconFill } })\n                    ]\n                  }\n                ),\n                /* @__PURE__ */ jsxs(\n                  \"div\",\n                  {\n                    css: [\n                      toggle,\n                      chevronIconUp,\n                      !hideToggleLabel ? toggleIconWithLabel : \"\"\n                    ],\n                    \"data-target\": \"toggle-label-hide\",\n                    children: [\n                      /* @__PURE__ */ jsx(\n                        \"span\",\n                        {\n                          css: (providerTheme) => [\n                            toggleLabel(mergedTheme(providerTheme.accordion)),\n                            hideToggleLabel ? visuallyHidden : \"\"\n                          ],\n                          children: \"Hide\"\n                        }\n                      ),\n                      /* @__PURE__ */ jsx(SvgChevronDownSingle, { theme: { fill: theme?.iconFill } })\n                    ]\n                  }\n                )\n              ] })\n            ]\n          }\n        ),\n        /* @__PURE__ */ jsx(\"div\", { css: collapsedBody, \"data-target\": \"body\", children: /* @__PURE__ */ jsx(\"div\", { children }) })\n      ] })\n    }\n  );\n};\n\nexport { AccordionRowNoJS };\n","import { jsxs, jsx, Fragment } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { useState, useEffect } from 'react';\nimport { SvgChevronDownSingle } from '../__generated__/icons/SvgChevronDownSingle.js';\nimport { mergeThemes } from '../utils/themes.js';\nimport { AccordionRowNoJS } from './AccordionRowNoJS.js';\nimport { accordionRow, button, chevronIconUp, chevronIconDown, toggleIconWithLabel, labelText, toggle, toggleLabel, expandedBody, collapsedBody } from './styles.js';\nimport { transformProviderTheme, themeAccordion } from './theme.js';\nimport { visuallyHidden as visuallyHidden$1 } from '../../foundations/accessibility/visually-hidden.js';\n\nconst visuallyHidden = css`\n\t${visuallyHidden$1}\n`;\nconst AccordionRow = ({\n  label,\n  hideToggleLabel = false,\n  children,\n  cssOverrides,\n  onClick = () => void 0,\n  theme\n}) => {\n  const [expanded, setExpanded] = useState(false);\n  const collapse = () => setExpanded(false);\n  const expand = () => setExpanded(true);\n  const [isBrowser, setIsBrowser] = useState(false);\n  const mergedTheme = (providerTheme) => mergeThemes(\n    themeAccordion,\n    theme,\n    providerTheme,\n    transformProviderTheme\n  );\n  function handleClick(event) {\n    if (expanded) {\n      collapse();\n    } else {\n      expand();\n    }\n    onClick(event);\n  }\n  useEffect(() => {\n    setIsBrowser(true);\n  }, []);\n  if (isBrowser) {\n    return /* @__PURE__ */ jsxs(\n      \"div\",\n      {\n        css: (providerTheme) => [\n          accordionRow(mergedTheme(providerTheme.accordion)),\n          cssOverrides\n        ],\n        children: [\n          /* @__PURE__ */ jsxs(\n            \"button\",\n            {\n              type: \"button\",\n              \"aria-expanded\": expanded,\n              onClick: handleClick,\n              css: (providerTheme) => [\n                button(mergedTheme(providerTheme.accordion)),\n                expanded ? chevronIconUp : chevronIconDown,\n                !hideToggleLabel ? toggleIconWithLabel : \"\"\n              ],\n              children: [\n                /* @__PURE__ */ jsx(\"strong\", { css: labelText, children: label }),\n                /* @__PURE__ */ jsxs(\"div\", { css: toggle, children: [\n                  hideToggleLabel ? /* @__PURE__ */ jsx(\"span\", { css: visuallyHidden, children: expanded ? \"Hide\" : \"Show more\" }) : /* @__PURE__ */ jsx(\n                    \"span\",\n                    {\n                      css: (providerTheme) => toggleLabel(mergedTheme(providerTheme.accordion)),\n                      children: expanded ? \"Hide\" : /* @__PURE__ */ jsxs(Fragment, { children: [\n                        \"Show\",\n                        /* @__PURE__ */ jsx(\"span\", { css: visuallyHidden, children: \" more\" })\n                      ] })\n                    }\n                  ),\n                  /* @__PURE__ */ jsx(SvgChevronDownSingle, { theme: { fill: theme?.iconFill } })\n                ] })\n              ]\n            }\n          ),\n          /* @__PURE__ */ jsx(\n            \"div\",\n            {\n              css: (providerTheme) => expanded ? expandedBody(mergedTheme(providerTheme.accordion)) : collapsedBody,\n              children: /* @__PURE__ */ jsx(\"div\", { hidden: !expanded, children })\n            }\n          )\n        ]\n      }\n    );\n  }\n  return /* @__PURE__ */ jsx(\n    AccordionRowNoJS,\n    {\n      label,\n      hideToggleLabel,\n      cssOverrides,\n      children\n    }\n  );\n};\n\nexport { AccordionRow };\n"],"names":[],"sourceRoot":""}