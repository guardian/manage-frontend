{"version":3,"file":"672.1d93e99b.iframe.bundle.js","mappings":";AAmCA;AAEA;AC1BA;AAEA;;;AAGA;;;;AAKA;AACA;AAEA;;AAEA;;;AAGA;AACA;;;;;;AAOA;AACA;AACA;;AAGA;AAOA;;;;AAIA;;;;;AAKA;AACA;;;AAGA;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;;;;;;AAOA;AACA;AACA;;AAGA;;;;;;;;;AASA;;AAEA;;;;AAIA;;;;;AAKA;AACA;;AAEA;;AAEA;AACA;;;;AAKA;;AAEA;;;;;AAMA;;;;;;;;;;;;;;;AAeA;AACA;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;;AAGA;;;ACvNA;AAEA;ACFA;AAEA;ACAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAGA;AACA;AACA;;;;;;ACdA;;AAEA;;;ACHA;AACA;AAQA;AALA;AACA;AAMA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AA6BA;AACA;AAEA;;AAGA;;AAGA;;AAGA;;;AAIA;;AAGA;;;;AA3CA;AACA;AACA;AACA;;AAEA;;;AAGA;;;;;;;;;;;;AAYA;;;ACuBA;ACxCA;AAEA;;;;;;;;;;;;;;;ACHA;AAbA;;AAEA;AACA;;AAYA;AARA;;AAEA;AACA;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sources":["webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/__generated__/icons/SvgTickRound.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/choice-card/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/label/SupportingText.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/label/Text.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/label/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/stack/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/text-input/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/text-input/TextInput.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/__generated__/icons/SvgAlertRound.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/user-feedback/styles.js"],"sourcesContent":["import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { visuallyHidden } from '../../../foundations/accessibility/visually-hidden.js';\nimport { iconSize } from '../../../foundations/__generated__/size.js';\n\nconst Svg = ({ size, theme }) => /* @__PURE__ */ jsx(\n  \"svg\",\n  {\n    width: size ? iconSize[size] : void 0,\n    height: void 0,\n    viewBox: \"-3 -3 30 30\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    focusable: false,\n    \"aria-hidden\": true,\n    children: /* @__PURE__ */ jsx(\n      \"path\",\n      {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10m-1.773-7.853-2.27-2.17-.8.8 2.709 3.791h.454l7.455-7.716-.82-.8z\",\n        fill: theme?.fill\n      }\n    )\n  }\n);\nconst SvgTickRound = ({\n  size,\n  theme,\n  isAnnouncedByScreenReader = false\n}) => /* @__PURE__ */ jsxs(Fragment, { children: [\n  /* @__PURE__ */ jsx(Svg, { size, theme }),\n  isAnnouncedByScreenReader ? /* @__PURE__ */ jsx(\n    \"span\",\n    {\n      css: css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`,\n      children: \"Ticked\"\n    }\n  ) : \"\"\n] });\n\nexport { SvgTickRound };\n","import { css } from '@emotion/react';\nimport { resets } from '../../foundations/utils/resets.js';\nimport { from } from '../../foundations/mq/mq.js';\nimport { space } from '../../foundations/__generated__/space.js';\nimport { width, height } from '../../foundations/__generated__/size.js';\nimport { visuallyHidden } from '../../foundations/accessibility/visually-hidden.js';\nimport { palette } from '../../foundations/__generated__/palette.js';\nimport { transitions } from '../../foundations/animation/transitions.js';\nimport { textSansBold17 } from '../../foundations/__generated__/typography.js';\n\nconst fieldset = css`\n\t${resets.fieldset};\n`;\nconst flexContainer = css`\n\twidth: 100%;\n\n\t${from.mobileLandscape} {\n\t\tdisplay: flex;\n\t\tjustify-content: flex-start;\n\t}\n`;\nconst containerTopMargin = css`\n\tmargin-top: ${space[2]}px;\n`;\nconst gridContainer = css`\n\twidth: 100%;\n\t${from.mobileLandscape} {\n\t\t@supports (display: grid) {\n\t\t\tdisplay: grid;\n\t\t\trow-gap: ${space[2]}px;\n\t\t\tcolumn-gap: ${space[2]}px;\n\t\t\t& > label {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t}\n\t}\n`;\nconst gridColumnsStyle = (columns) => css`\n\t${from.mobileLandscape} {\n\t\tgrid-template-columns: repeat(${columns}, 1fr);\n\t}\n`;\nconst gridColumns = {\n  2: gridColumnsStyle(2),\n  3: gridColumnsStyle(3),\n  4: gridColumnsStyle(4),\n  5: gridColumnsStyle(5)\n};\nconst input = (theme) => css`\n\t${visuallyHidden};\n\n\t&:focus + label {\n\t\thtml:not(.src-focus-disabled) & {\n\t\t\toutline: 3px solid ${palette.focus[400]};\n\t\t}\n\t}\n\n\t&:checked + label {\n\t\tbox-shadow: inset 0 0 0 2px ${theme.borderSelected};\n\t\tbackground-color: ${theme.backgroundSelected};\n\n\t\t& > * {\n\t\t\tcolor: ${theme.textSelected};\n\n\t\t\t/* last child is the tick */\n\t\t\t&:last-child {\n\t\t\t\t&:before {\n\t\t\t\t\tright: 0;\n\t\t\t\t}\n\t\t\t\t&:after {\n\t\t\t\t\ttop: 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\nconst tickAnimation = css`\n\t@keyframes labelFadeOutIn {\n\t\t0% {\n\t\t\topacity: 1;\n\t\t}\n\t\t1%,\n\t\t80% {\n\t\t\topacity: 0;\n\t\t}\n\t\t100% {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t@keyframes tickFadeInOut {\n\t\t0% {\n\t\t\topacity: 0;\n\t\t}\n\t\t10%,\n\t\t40% {\n\t\t\topacity: 1;\n\t\t}\n\t\t70% {\n\t\t\topacity: 0;\n\t\t}\n\t}\n\n\t&:checked + label {\n\t\t& > * {\n\t\t\tanimation-duration: 1s;\n\t\t\tanimation-name: labelFadeOutIn;\n\n\t\t\t/* last child is the tick */\n\t\t\t&:last-child {\n\t\t\t\tanimation-name: tickFadeInOut;\n\t\t\t}\n\t\t}\n\t}\n`;\nconst choiceCard = (theme) => css`\n\tflex: 1;\n\tdisplay: flex;\n\tjustify-content: center;\n\tmin-height: ${height.inputMedium}px;\n\tmargin: 0 0 ${space[2]}px 0;\n\tbox-shadow: inset 0 0 0 1px ${theme.borderUnselected};\n\tborder-radius: 4px;\n\tposition: relative;\n\tcursor: pointer;\n\tbackground-color: ${theme.backgroundUnselected};\n\tcolor: ${theme.textUnselected};\n\n\t${from.mobileLandscape} {\n\t\tmargin: 0 ${space[2]}px 0 0;\n\t\t&:last-child {\n\t\t\tmargin: 0;\n\t\t}\n\t}\n\n\t&:hover {\n\t\tbox-shadow: inset 0 0 0 2px ${theme.borderHover};\n\t\tbackground-color: ${theme.backgroundHover};\n\t\tcolor: ${theme.textHover};\n\t}\n`;\nconst contentWrapper = css`\n\tflex: 0 1 auto;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\tjustify-content: center;\n\tposition: relative;\n\tbox-sizing: border-box;\n\n\t${from.mobileLandscape} {\n\t\tflex-direction: column;\n\t\tpadding: ${space[2]}px ${space[6]}px;\n\t}\n\n\t& > * {\n\t\t${textSansBold17};\n\t\ttext-align: center;\n\t}\n\n\t& svg {\n\t\twidth: ${width.iconMedium}px;\n\t\tmax-height: ${height.iconMedium}px;\n\t\tfill: currentColor;\n\t\tmargin-right: ${space[1]}px;\n\n\t\t${from.mobileLandscape} {\n\t\t\tmargin-bottom: -${space[1]}px;\n\t\t\tmargin-right: 0;\n\t\t}\n\t}\n`;\nconst contentWrapperLabelOnly = css`\n\twidth: 100%;\n\t${from.mobileLandscape} {\n\t\t& > div {\n\t\t\twidth: 100%;\n\t\t}\n\t}\n`;\nconst tick = (theme) => css`\n\t/* overall positional properties */\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\twidth: 7px;\n\theight: 20px;\n\ttransform: rotate(45deg) translateX(-100%) translateY(-35%);\n\topacity: 0;\n\n\t/* the checkmark âœ“ */\n\t&:after,\n\t&:before {\n\t\tposition: absolute;\n\t\tdisplay: block;\n\t\tbackground-color: ${theme.backgroundTick};\n\t\ttransition: all ${transitions.short} ease-in-out;\n\t\tcontent: '';\n\t}\n\n\t/* the short side */\n\t&:before {\n\t\theight: 2px;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tright: 100%;\n\t\ttransition-delay: 0.05s;\n\t}\n\n\t/* the long side */\n\t&:after {\n\t\tbottom: 0;\n\t\tright: 0;\n\t\ttop: 100%;\n\t\twidth: 2px;\n\t\ttransition-delay: 0.1s;\n\t}\n`;\nconst errorChoiceCard = (theme) => css`\n\tbox-shadow: inset 0 0 0 2px ${theme.borderError};\n\n\t& > * {\n\t\tcolor: ${theme.textError};\n\t}\n`;\n\nexport { choiceCard, containerTopMargin, contentWrapper, contentWrapperLabelOnly, errorChoiceCard, fieldset, flexContainer, gridColumns, gridContainer, input, tick, tickAnimation };\n","import { jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { mergedTheme } from './shared.js';\nimport { supportingText } from './styles.js';\nimport { visuallyHidden as visuallyHidden$1 } from '../../foundations/accessibility/visually-hidden.js';\n\nconst visuallyHidden = css`\n\t${visuallyHidden$1}\n`;\nconst SupportingText = ({\n  hideLabel,\n  children,\n  theme\n}) => {\n  return /* @__PURE__ */ jsx(\n    \"p\",\n    {\n      css: (providerTheme) => [\n        supportingText(mergedTheme(providerTheme.label, theme)),\n        hideLabel ? visuallyHidden : \"\"\n      ],\n      children\n    }\n  );\n};\n\nexport { SupportingText };\n","import { jsxs, jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { mergedTheme } from './shared.js';\nimport { labelText, optionalText } from './styles.js';\nimport { visuallyHidden as visuallyHidden$1 } from '../../foundations/accessibility/visually-hidden.js';\n\nconst visuallyHidden = css`\n\t${visuallyHidden$1}\n`;\nconst Text = ({\n  text,\n  optional,\n  hideLabel,\n  size = \"medium\",\n  theme\n}) => /* @__PURE__ */ jsxs(\n  \"div\",\n  {\n    css: (providerTheme) => [\n      labelText(mergedTheme(providerTheme.label, theme), size),\n      hideLabel ? visuallyHidden : \"\"\n    ],\n    children: [\n      text,\n      \" \",\n      optional ? /* @__PURE__ */ jsx(\n        \"span\",\n        {\n          css: (providerTheme) => optionalText(mergedTheme(providerTheme.label, theme)),\n          children: \"Optional\"\n        }\n      ) : \"\"\n    ]\n  }\n);\n\nexport { Text };\n","import { css } from '@emotion/react';\nimport { resets } from '../../foundations/utils/resets.js';\nimport { textSans14, textSansBold17, textSansBold14 } from '../../foundations/__generated__/typography.js';\n\nconst textSize = {\n  medium: textSansBold17,\n  small: textSansBold14\n};\nconst legend = css`\n\t${resets.legend};\n`;\nconst labelText = (label, size) => css`\n\t${textSize[size]};\n\tcolor: ${label.textLabel};\n`;\nconst optionalText = (label) => css`\n\t${textSans14};\n\tcolor: ${label.textOptional};\n\tfont-style: italic;\n`;\nconst supportingText = (label) => css`\n\t${textSans14};\n\tcolor: ${label.textSupporting};\n\tmargin: 2px 0 0;\n`;\n\nexport { labelText, legend, optionalText, supportingText };\n","import { css } from '@emotion/react';\nimport { space } from '../../foundations/__generated__/space.js';\n\nconst stack = css`\n\t& > * {\n\t\twidth: 100%;\n\t}\n`;\nconst stackSpace = (number) => css`\n\t& > * + * {\n\t\tmargin-top: ${space[number]}px;\n\t}\n`;\n\nexport { stack, stackSpace };\n","import { css } from '@emotion/react';\nimport { size } from '../../foundations/__generated__/size.js';\nimport { space } from '../../foundations/__generated__/space.js';\nimport { focusHalo } from '../../foundations/accessibility/focus-halo.js';\nimport { textSans17, textSans14 } from '../../foundations/__generated__/typography.js';\n\nconst inputSizeMedium = css`\n\t${textSans17};\n\theight: ${size.medium}px;\n`;\nconst inputSizeSmall = css`\n\t${textSans14};\n\theight: ${size.small}px;\n`;\nconst inputSize = {\n  medium: inputSizeMedium,\n  small: inputSizeSmall\n};\nconst errorInput = (textInput2) => css`\n\tborder: 2px solid ${textInput2.borderError};\n\tborder-radius: 4px;\n\tcolor: ${textInput2.textError};\n\tmargin-top: 0;\n`;\nconst successInput = (textInput2) => css`\n\tborder: 2px solid ${textInput2.borderSuccess};\n\tborder-radius: 4px;\n\tcolor: ${textInput2.textSuccess};\n\tmargin-top: 0;\n`;\nconst textInput = (textInput2, size2) => css`\n\tbox-sizing: border-box;\n\t${inputSize[size2]};\n\tcolor: ${textInput2.textUserInput};\n\tbackground-color: ${textInput2.backgroundInput};\n\tborder: 1px solid ${textInput2.border};\n\tborder-radius: 4px;\n\tpadding: 0 ${space[2]}px;\n\n\t&:focus {\n\t\t${focusHalo}\n\t}\n\n\t&:invalid {\n\t\t/* Remove styling of invalid input elements that gets applied in Firefox */\n\t\tbox-shadow: none;\n\n\t\t/*\n\t\t\tWe automatically apply error styling to fields in an invalid state,\n\t\t\tbut stop short of applying it to empty required fields.\n\t\t\t*/\n\t\t&[value]:not([value='']) {\n\t\t\t${errorInput(textInput2)};\n\t\t}\n\t}\n`;\nconst labelMargin = css`\n\tmargin-top: ${space[1]}px;\n`;\nconst supportingTextMargin = css`\n\tmargin-top: 6px;\n`;\nconst inlineMessageMargin = css`\n\tmargin-top: 2px;\n`;\nconst widthFluid = css`\n\twidth: 100%;\n`;\nconst width30 = css`\n\twidth: 40ex;\n\tmax-width: 100%; /* prevent overflow on narrow viewports */\n`;\nconst width10 = css`\n\twidth: 18ex;\n`;\nconst width4 = css`\n\twidth: 9ex;\n`;\n\nexport { errorInput, inlineMessageMargin, labelMargin, successInput, supportingTextMargin, textInput, width10, width30, width4, widthFluid };\n","import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';\nimport { useId } from 'react';\nimport { Label } from '../label/Label.js';\nimport { InlineError } from '../user-feedback/InlineError.js';\nimport { InlineSuccess } from '../user-feedback/InlineSuccess.js';\nimport { mergeThemes } from '../utils/themes.js';\nimport { inlineMessageMargin, widthFluid, textInput, supportingTextMargin, labelMargin, errorInput, successInput, width30, width10, width4 } from './styles.js';\nimport { themeTextInput } from './theme.js';\nimport { descriptionId } from '../../foundations/accessibility/description-id.js';\n\nconst widths = {\n  30: width30,\n  10: width10,\n  4: width4\n};\nconst TextInput = ({\n  id,\n  label: labelText,\n  optional = false,\n  hideLabel = false,\n  supporting,\n  size = \"medium\",\n  width,\n  error,\n  success,\n  theme,\n  cssOverrides,\n  ...props\n}) => {\n  const defaultId = useId();\n  const textInputId = id ?? defaultId;\n  const mergedTheme = (providerTheme) => mergeThemes(\n    themeTextInput,\n    theme,\n    providerTheme.textInput\n  );\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    /* @__PURE__ */ jsxs(\n      Label,\n      {\n        text: labelText,\n        optional: !!optional,\n        hideLabel,\n        supporting,\n        theme,\n        size,\n        htmlFor: textInputId,\n        children: [\n          error && /* @__PURE__ */ jsx(\"div\", { css: inlineMessageMargin, children: /* @__PURE__ */ jsx(\n            InlineError,\n            {\n              id: descriptionId(textInputId),\n              theme,\n              size,\n              children: error\n            }\n          ) }),\n          !error && success && /* @__PURE__ */ jsx(\"div\", { css: inlineMessageMargin, children: /* @__PURE__ */ jsx(\n            InlineSuccess,\n            {\n              id: descriptionId(textInputId),\n              theme,\n              size,\n              children: success\n            }\n          ) })\n        ]\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"input\",\n      {\n        css: (providerTheme) => [\n          width ? widths[width] : widthFluid,\n          textInput(mergedTheme(providerTheme), size),\n          supporting ? supportingTextMargin : labelMargin,\n          error ? errorInput(mergedTheme(providerTheme)) : \"\",\n          !error && success ? successInput(mergedTheme(providerTheme)) : \"\",\n          cssOverrides\n        ],\n        type: \"text\",\n        id: textInputId,\n        \"aria-required\": !optional,\n        \"aria-invalid\": !!error,\n        \"aria-describedby\": error ?? success ? descriptionId(textInputId) : \"\",\n        required: !optional,\n        ...props\n      }\n    )\n  ] });\n};\n\nexport { TextInput };\n","import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { visuallyHidden } from '../../../foundations/accessibility/visually-hidden.js';\nimport { iconSize } from '../../../foundations/__generated__/size.js';\n\nconst Svg = ({ size, theme }) => /* @__PURE__ */ jsx(\n  \"svg\",\n  {\n    width: size ? iconSize[size] : void 0,\n    height: void 0,\n    viewBox: \"-3 -3 30 30\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    focusable: false,\n    \"aria-hidden\": true,\n    children: /* @__PURE__ */ jsx(\n      \"path\",\n      {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10m-10.704 1.818h1.386l.659-8.636-.91-.91h-.885l-.91.91zm2.068 3.637c0-.75-.614-1.364-1.364-1.364s-1.364.614-1.364 1.364.614 1.363 1.364 1.363 1.364-.613 1.364-1.363\",\n        fill: theme?.fill\n      }\n    )\n  }\n);\nconst SvgAlertRound = ({\n  size,\n  theme,\n  isAnnouncedByScreenReader = false\n}) => /* @__PURE__ */ jsxs(Fragment, { children: [\n  /* @__PURE__ */ jsx(Svg, { size, theme }),\n  isAnnouncedByScreenReader ? /* @__PURE__ */ jsx(\n    \"span\",\n    {\n      css: css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`,\n      children: \"Warning\"\n    }\n  ) : \"\"\n] });\n\nexport { SvgAlertRound };\n","import { css } from '@emotion/react';\nimport { remWidth, remHeight } from '../../foundations/__generated__/size.js';\nimport { textSans14, textSans17 } from '../../foundations/__generated__/typography.js';\n\nconst inlineMessage = css`\n\tdisplay: flex;\n\talign-items: flex-start;\n\n\tsvg {\n\t\tfill: currentColor;\n\t\t/* we don't want the SVG to change size depending on available space */\n\t\tflex: none;\n\n\t\t/*\n\t\ta visual kick to vertically align the icon with the top row of text\n\t\tand horizontally pull it to the beginning of the row\n\t\t */\n\t\ttransform: translate(-4px, -4px);\n\t}\n`;\nconst inlineMessageSmall = css`\n\t${textSans14};\n\tsvg {\n\t\twidth: ${remWidth.iconSmall};\n\t\theight: ${remHeight.iconSmall};\n\t}\n`;\nconst inlineMessageMedium = css`\n\t${textSans17};\n\tsvg {\n\t\twidth: ${remWidth.iconMedium};\n\t\theight: ${remHeight.iconMedium};\n\t}\n`;\nconst inlineMessageSize = {\n  small: inlineMessageSmall,\n  medium: inlineMessageMedium\n};\nconst inlineError = (userFeedback, size) => css`\n\t${inlineMessage};\n\t${inlineMessageSize[size]};\n\tcolor: ${userFeedback.textError};\n`;\nconst inlineSuccess = (userFeedback, size) => css`\n\t${inlineMessage};\n\t${inlineMessageSize[size]};\n\tcolor: ${userFeedback.textSuccess};\n`;\n\nexport { inlineError, inlineSuccess };\n"],"names":[],"sourceRoot":""}