{"version":3,"file":"4723.636acf7b.iframe.bundle.js","mappings":";AAmCA;AAEA;ACjCA;;AAEA;;AAGA;;;;;AAKA;AACA;AACA;;AAGA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;;AClBA;;;;AAKA;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;;;;;;;AAiBA;;;AAIA;;AAGA;;;;;AAKA;AACA;AACA;;;AAGA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;;;;;;;;;;AAWA;AACA;;;;;;;;;AAUA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;;;;AAIA;;;;AC5JA;;;AASA;AACA;;AAEA;;;AAPA;;;ACKA;ACPA;;;AAGA;;;;AAIA;;;AAIA;;;;;;;;AAQA;;;;;AAKA;;;AAIA;;AAGA;;;;;AAKA;AACA;AACA;;;;;AAKA;;;AAGA;;;AAGA;AACA;;;;AAIA;;;;;;;;;AASA;;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;;AAUA;AACA;AACA;;;;;;;AAQA;AACA;AACA","sources":["webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/__generated__/icons/SvgAlertTriangle.js","webpack://manage-frontend/./node_modules/@guardian/source-development-kitchen/dist/react-components/summary/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/checkbox/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/inline/styles.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/inline/Inline.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/radio/styles.js"],"sourcesContent":["import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { visuallyHidden } from '../../../foundations/accessibility/visually-hidden.js';\nimport { iconSize } from '../../../foundations/__generated__/size.js';\n\nconst Svg = ({ size, theme }) => /* @__PURE__ */ jsx(\n  \"svg\",\n  {\n    width: size ? iconSize[size] : void 0,\n    height: void 0,\n    viewBox: \"-3 -3 30 30\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    focusable: false,\n    \"aria-hidden\": true,\n    children: /* @__PURE__ */ jsx(\n      \"path\",\n      {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M11.41 2 1 19.057l.668.943h20.664l.668-.943L12.59 2zm-.063 12.178h1.306l.621-6.917-.856-.728h-.835l-.857.728zM12 15.452c.7 0 1.274.573 1.274 1.274 0 .7-.573 1.274-1.274 1.274-.7 0-1.274-.573-1.274-1.274 0-.7.573-1.274 1.274-1.274\",\n        fill: theme?.fill\n      }\n    )\n  }\n);\nconst SvgAlertTriangle = ({\n  size,\n  theme,\n  isAnnouncedByScreenReader = false\n}) => /* @__PURE__ */ jsxs(Fragment, { children: [\n  /* @__PURE__ */ jsx(Svg, { size, theme }),\n  isAnnouncedByScreenReader ? /* @__PURE__ */ jsx(\n    \"span\",\n    {\n      css: css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`,\n      children: \"Warning\"\n    }\n  ) : \"\"\n] });\n\nexport { SvgAlertTriangle };\n","import { css } from '@emotion/react';\nimport { space, textSans17, size, textSansBold17 } from '@guardian/source/foundations';\n\nconst wrapperStyles = (color) => css`\n\tborder: 2px solid ${color};\n\tborder-radius: 4px;\n\tpadding: ${space[1]}px;\n\tdisplay: flex;\n`;\nconst iconStyles = (color) => css`\n\tdisplay: flex;\n\tflex: 0 1 auto;\n\tmargin-top: 1px;\n\tsvg {\n\t\tfill: ${color};\n\t\theight: ${size.xsmall}px;\n\t\twidth: ${size.xsmall}px;\n\t}\n`;\nconst messageStyles = (color, isBold = true) => css`\n\t${isBold ? textSansBold17 : textSans17};\n\tline-height: 1.4;\n\tcolor: ${color};\n`;\nconst messageWrapperStyles = css`\n\tmargin-left: ${space[1]}px;\n`;\nconst contextStyles = css`\n\t${textSans17};\n`;\n\nexport { contextStyles, iconStyles, messageStyles, messageWrapperStyles, wrapperStyles };\n","import { css } from '@emotion/react';\nimport { resets } from '../../foundations/utils/resets.js';\nimport { height, width } from '../../foundations/__generated__/size.js';\nimport { space } from '../../foundations/__generated__/space.js';\nimport { transitions } from '../../foundations/animation/transitions.js';\nimport { focusHalo } from '../../foundations/accessibility/focus-halo.js';\nimport { appearance } from '../../foundations/utils/supports-queries.js';\nimport { textSans24, textSans17, textSans15 } from '../../foundations/__generated__/typography.js';\n\nconst fieldset = css`\n\t${resets.fieldset};\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex-direction: column;\n`;\nconst checkboxContainer = (checkbox2, error = false) => css`\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: flex-start;\n\t/**\n\t * Ensure minimum height of 44px by applying 10px padding to top and bottom\n\t * of container. This ensures consistent spacing when supporting text present.\n\t */\n\tpadding: ${(height.inputMedium - height.inputXsmall) / 2}px 0;\n\tcursor: pointer;\n\n\t&:hover {\n\t\tinput {\n\t\t\tborder: ${error ? `2px solid ${checkbox2.borderError}` : `2px solid ${checkbox2.borderHover}`};\n\t\t\t/*\n\t\t\t\tIn the indeterminate state, we increase the border width by 1px on\n\t\t\t\thover. This causes the position of the indeterminate dash to shift as it\n\t\t\t\tis absolutely positioned. This negative margin accounts for the extra\n\t\t\t\tborder width and prevents the shift. We need to locate this css here as\n\t\t\t\tthe hover sits on the container, rather than the input element.\n\t\t\t*/\n\t\t\t&:indeterminate {\n\t\t\t\t&:after {\n\t\t\t\t\tmargin: -1px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t&:active {\n\t\tinput {\n\t\t\tborder-color: ${checkbox2.borderHover};\n\t\t}\n\t}\n`;\nconst label = css`\n\tcursor: pointer;\n`;\nconst checkbox = (checkbox2, error = false) => css`\n\tflex: 0 0 auto;\n\tbox-sizing: border-box;\n\tdisplay: inline-block;\n\tcursor: pointer;\n\twidth: ${width.inputXsmall}px;\n\theight: ${height.inputXsmall}px;\n\tmargin: 0 ${space[2]}px 0 0;\n\n\tborder: 1px solid currentColor;\n\tbackground: ${checkbox2.fillUnselected};\n\tborder-radius: 4px;\n\tposition: relative;\n\ttransition: box-shadow ${transitions.short};\n\ttransition-delay: 0.08s;\n\tcolor: ${checkbox2.borderUnselected};\n\n\t&:focus {\n\t\t${focusHalo};\n\t}\n\n\t@supports (${appearance}) {\n\t\tappearance: none;\n\t\t&:checked {\n\t\t\tborder: ${error ? `2px solid ${checkbox2.borderError}` : `2px solid ${checkbox2.borderSelected}`};\n\t\t\t& ~ span:before {\n\t\t\t\tright: 0;\n\t\t\t}\n\t\t\t& ~ span:after {\n\t\t\t\ttop: 0;\n\t\t\t}\n\t\t}\n\n\t\t&:indeterminate {\n\t\t\t&:after {\n\t\t\t\t${textSans24};\n\t\t\t\tcolor: ${checkbox2.textIndeterminate};\n\t\t\t\tcontent: '-';\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: -7px;\n\t\t\t\tleft: 6px;\n\t\t\t\tz-index: 5;\n\t\t\t}\n\t\t}\n\t}\n`;\nconst labelText = (checkbox2) => css`\n\t${textSans17};\n\tcolor: ${checkbox2.textLabel};\n\twidth: 100%;\n\tmargin-top: 1px;\n\t/* If label text is empty, add additional spacing to align supporting text */\n\t&:empty {\n\t\tmargin-top: 2px;\n\t}\n`;\nconst supportingText = (checkbox2) => css`\n\t${textSans15};\n\tcolor: ${checkbox2.textSupporting};\n`;\nconst tick = (checkbox2) => css`\n\t@supports (\n\t\t(appearance: none) or (-webkit-appearance: none) or (-moz-appearance: none)\n\t) {\n\t\t/* overall positional properties */\n\t\tposition: absolute;\n\t\twidth: 6px;\n\t\theight: 12px;\n\t\ttransform: rotate(45deg);\n\t\ttop: 15px;\n\t\tleft: 9px;\n\t\t/**\n\t\t * This prevents simulated click events to the checkbox (eg. from Selenium\n\t\t * tests) being intercepted by the tick\n\t\t */\n\t\tpointer-events: none;\n\n\t\t/* the checkmark âœ“ */\n\t\t&:after,\n\t\t&:before {\n\t\t\tposition: absolute;\n\t\t\tdisplay: block;\n\t\t\tbackground-color: ${checkbox2.fillSelected};\n\t\t\ttransition: all ${transitions.short} ease-in-out;\n\t\t\tcontent: '';\n\t\t}\n\n\t\t/* the short side */\n\t\t&:before {\n\t\t\theight: 2px;\n\t\t\tbottom: 0;\n\t\t\tleft: 0;\n\t\t\tright: 100%;\n\t\t\ttransition-delay: 0.05s;\n\t\t}\n\n\t\t/* the long side */\n\t\t&:after {\n\t\t\tbottom: 0;\n\t\t\tright: 0;\n\t\t\ttop: 100%;\n\t\t\twidth: 2px;\n\t\t\ttransition-delay: 0.1s;\n\t\t}\n\t}\n`;\nconst errorCheckbox = (checkbox2) => css`\n\tborder: 2px solid ${checkbox2.borderError};\n\tborder-radius: 4px;\n\t&:not(:checked):hover,\n\t&:active {\n\t\tborder: 2px solid ${checkbox2.borderHover};\n\t}\n`;\n\nexport { checkbox, checkboxContainer, errorCheckbox, fieldset, label, labelText, supportingText, tick };\n","import { css } from '@emotion/react';\nimport { until } from '../../foundations/mq/mq.js';\nimport { space } from '../../foundations/__generated__/space.js';\n\nconst inline = css`\n\toverflow: hidden;\n`;\nconst inlineWrapper = css`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n`;\nconst collapseBreakpoint = (breakpoint) => css`\n\t${until[breakpoint]} {\n\t\tflex-direction: column;\n\t}\n`;\nconst inlineSpace = (number) => css`\n\tmargin: -${space[number] / 2}px;\n\t> * {\n\t\tmargin: ${space[number] / 2}px;\n\t}\n`;\n\nexport { collapseBreakpoint, inline, inlineSpace, inlineWrapper };\n","import { jsx } from '@emotion/react/jsx-runtime';\nimport { inline, inlineWrapper, inlineSpace, collapseBreakpoint } from './styles.js';\nimport { isUndefined } from '../../libs/dist/isUndefined/isUndefined.js';\n\nconst Inline = ({\n  cssOverrides,\n  children,\n  space,\n  collapseUntil,\n  ...props\n}) => {\n  return /* @__PURE__ */ jsx(\"div\", { css: inline, children: /* @__PURE__ */ jsx(\n    \"div\",\n    {\n      css: [\n        inlineWrapper,\n        isUndefined(space) ? \"\" : inlineSpace(space),\n        collapseUntil ? collapseBreakpoint(collapseUntil) : \"\",\n        cssOverrides\n      ],\n      ...props,\n      children\n    }\n  ) });\n};\n\nexport { Inline };\n","import { css } from '@emotion/react';\nimport { resets } from '../../foundations/utils/resets.js';\nimport { width, height } from '../../foundations/__generated__/size.js';\nimport { space } from '../../foundations/__generated__/space.js';\nimport { transitions } from '../../foundations/animation/transitions.js';\nimport { focusHalo } from '../../foundations/accessibility/focus-halo.js';\nimport { appearance } from '../../foundations/utils/supports-queries.js';\nimport { textSans17, textSans15 } from '../../foundations/__generated__/typography.js';\n\nconst fieldset = (radio2) => css`\n\t${resets.fieldset};\n\n\t&[aria-invalid='true'] input {\n\t\tborder: 2px solid ${radio2.borderError};\n\n\t\t&:not(:checked):hover,\n\t\t&:active {\n\t\t\tborder: 2px solid ${radio2.borderHover};\n\t\t}\n\t}\n`;\nconst radioContainer = (radio2) => css`\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: flex-start;\n\t/**\n\t * Ensure minimum height of 44px by applying 10px padding to top and bottom\n\t * of container. This ensures consistent spacing when supporting text present.\n\t */\n\tpadding: ${(height.inputMedium - height.inputXsmall) / 2}px 0;\n\tcursor: pointer;\n\n\t&:hover {\n\t\tinput {\n\t\t\tborder: 2px solid ${radio2.borderHover};\n\t\t}\n\t}\n`;\nconst label = css`\n\tcursor: pointer;\n`;\nconst radio = (radio2) => css`\n\tflex: 0 0 auto;\n\tcursor: pointer;\n\tbox-sizing: border-box;\n\tdisplay: inline-block;\n\twidth: ${width.inputXsmall}px;\n\theight: ${height.inputXsmall}px;\n\tmargin: 0 ${space[2]}px 0 0;\n\n\tborder: 1px solid currentColor;\n\tborder-radius: 50%;\n\tposition: relative;\n\ttransition: box-shadow ${transitions.short};\n\ttransition-delay: 0.08s;\n\n\tcolor: ${radio2.borderUnselected};\n\n\t&:checked {\n\t\tborder: 2px solid ${radio2.borderSelected};\n\t\tcolor: ${radio2.fillSelected};\n\t}\n\n\t&:focus {\n\t\t${focusHalo};\n\t}\n\n\t/*\n\tTake care: Emotion extracts @supports blocks and moves them below\n\tall other <style> elements, making these values hard to override.\n\tI have chosen to keep these styles in the @supports block as\n\tmoving them out makes radio buttons look horrible on older browsers\n\t*/\n\t@supports (${appearance}) {\n\t\tappearance: none;\n\t\tbackground-color: ${radio2.fillUnselected};\n\n\t\t&:after {\n\t\t\tbackground: currentColor;\n\t\t\tposition: absolute;\n\t\t\tcontent: '';\n\t\t\ttop: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tleft: 0;\n\t\t\tborder-radius: 50%;\n\t\t\ttransform: scale(0);\n\t\t\ttransform-origin: center;\n\t\t\ttransition: transform ${transitions.short};\n\t\t}\n\n\t\t&:checked {\n\t\t\t&:after {\n\t\t\t\ttransform: scale(0.6);\n\t\t\t}\n\t\t}\n\t}\n`;\nconst labelText = (radio2) => css`\n\t${textSans17};\n\tcolor: ${radio2.textLabel};\n\twidth: 100%;\n\tmargin-top: 1px;\n\t/* If label text is empty, add additional spacing to align supporting text */\n\t&:empty {\n\t\tmargin-top: 2px;\n\t}\n`;\nconst supportingText = (radio2) => css`\n\t${textSans15};\n\tcolor: ${radio2.textSupporting};\n`;\n\nexport { fieldset, label, labelText, radio, radioContainer, supportingText };\n"],"names":[],"sourceRoot":""}