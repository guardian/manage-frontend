{"version":3,"file":"components-mma-upgrade-UpgradeSupport-stories.96acc8f5.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAqBA;;;;;;;;;AAUA;;AAMA;;AAIA;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;;;;;;;;;;;;;;AAcA;AACA;;;;;;;;AAQA;AACA;;;;;;;;;;;AAWA;;;;;;AAMA;;;;AAMA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AACA;;AAGA;;;;;AAKA;;;AAGA;;;;ACnIA;AC8BA;AAEA","sources":["webpack://manage-frontend/./node_modules/@guardian/source-development-kitchen/dist/react-components/toggle-switch/styles.js","webpack://manage-frontend/./node_modules/@guardian/source-development-kitchen/dist/react-components/toggle-switch/ToggleSwitch.js","webpack://manage-frontend/./node_modules/@guardian/source/dist/react-components/__generated__/icons/SvgReload.js"],"sourcesContent":["import { css } from '@emotion/react';\nimport { neutral, space, success, brand, textSans15, textSansBold15, textSans17, textSansBold17 } from '@guardian/source/foundations';\n\nconst toggleBackground = \"rgba(255, 255, 255, 0.4)\";\nconst toggleBorder = \"rgba(255, 255, 255, 0.6)\";\nconst toggleBorderGreen = \"#A7CFB8\";\nconst buttonStyles = css`\n\tflex: none;\n\tborder: none;\n\tmargin: 0;\n\tpadding: 0;\n\tdisplay: inline-block;\n\ttext-align: center;\n\tposition: relative;\n\ttransition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n\tcursor: pointer;\n\n\t&:after {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tborder-radius: 50%;\n\t\tbackground: ${neutral[100]};\n\t\twill-change: left;\n\t\ttransition: left 0.15s ease-in-out;\n\t}\n\n\t:focus + .tooltiptext {\n\t\topacity: 1;\n\t\tvisibility: visible;\n\t}\n`;\nconst buttonStylesMargin = (labelPosition) => {\n  switch (labelPosition) {\n    case \"left\":\n      return css`\n\t\t\t\tmargin-left: 8px;\n\t\t\t`;\n    case \"right\":\n      return css`\n\t\t\t\tmargin-right: 8px;\n\t\t\t`;\n  }\n};\nconst toggleStyles = (format) => {\n  return css`\n\t\twidth: 44px;\n\t\theight: 22px;\n\t\tborder-radius: 16px;\n\t\tbox-sizing: unset;\n\n\t\t/* this will go away when resets have been standardised */\n\t\t&:before,\n\t\t&:after {\n\t\t\tbox-sizing: border-box;\n\t\t}\n\n\t\t&:before {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\ttop: 5px;\n\t\t\theight: 11px;\n\t\t\twidth: 6px;\n\t\t\tright: 8px;\n\t\t\topacity: 0;\n\t\t\tborder-bottom: 2px solid ${success[400]};\n\t\t\tborder-right: 2px solid ${success[400]};\n\t\t\ttransform: rotate(45deg);\n\t\t\ttransition-property: opacity;\n\t\t\ttransition-duration: 0.2s;\n\t\t}\n\n\t\t&:after {\n\t\t\theight: 18px;\n\t\t\twidth: 18px;\n\t\t\ttop: 2px;\n\t\t\tleft: 2px;\n\t\t}\n\n\t\t&[aria-checked='false'] {\n\t\t\tbackground-color: ${format ? toggleBackground : neutral[46]};\n\t\t\tborder: 1px solid ${format ? toggleBorder : neutral[46]};\n\t\t}\n\n\t\t&[aria-checked='false']:before {\n\t\t\ttransition-delay: 0;\n\t\t}\n\n\t\t&[aria-checked='true'] {\n\t\t\tbackground-color: ${success[400]};\n\t\t\tborder: 1px solid ${format ? toggleBorderGreen : success[400]};\n\t\t}\n\n\t\t&[aria-checked='true']:before {\n\t\t\topacity: 1;\n\t\t\tz-index: 1;\n\t\t\ttransition-delay: 0.2s;\n\t\t}\n\n\t\t&[aria-checked='true']:after {\n\t\t\tleft: 24px;\n\t\t\tbackground: ${neutral[100]};\n\t\t}\n\n\t\t&:focus {\n\t\t\toutline: 0;\n\t\t\thtml:not(.src-focus-disabled) & {\n\t\t\t\toutline: 5px solid ${format ? neutral[100] : brand[500]};\n\t\t\t\toutline-offset: 3px;\n\t\t\t}\n\t\t}\n\t`;\n};\nconst labelStyles = (fontSize, fontWeight, format) => css`\n\t${fontSize === \"small\" && (fontWeight === \"regular\" ? textSans15 : textSansBold15)};\n\t${fontSize === \"medium\" && (fontWeight === \"regular\" ? textSans17 : textSansBold17)};\n\tcolor: ${format ? neutral[100] : neutral[7]};\n\tdisplay: inline-flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tcursor: pointer;\n\tuser-select: none;\n\tposition: relative;\n`;\nconst labelBorderStyles = (format) => css`\n\tborder-top: 1px solid ${format ? neutral[100] : neutral[46]};\n\tpadding-top: ${space[1]}px;\n\twidth: 100%;\n`;\nconst tooltipStyles = css`\n\tposition: absolute;\n\tvisibility: hidden;\n\twidth: 248px;\n\ttop: 40px;\n\tbackground-color: ${neutral[100]};\n\tborder: 1px solid rgba(18, 18, 18, 0.25);\n\tborder-radius: 3px;\n\tpadding: ${space[2]};\n\tz-index: 1;\n\topacity: 0;\n\ttransition: 0.7s opacity;\n`;\n\nexport { buttonStyles, buttonStylesMargin, labelBorderStyles, labelStyles, toggleStyles, tooltipStyles };\n","import { jsxs, jsx } from '@emotion/react/jsx-runtime';\nimport { generateSourceId, descriptionId } from '@guardian/source/foundations';\nimport { useState, useEffect } from 'react';\nimport { labelStyles, labelBorderStyles, buttonStyles, buttonStylesMargin, toggleStyles, tooltipStyles } from './styles.js';\n\nconst ToggleSwitch = ({\n  checked,\n  id,\n  fontWeight = \"regular\",\n  fontSize = \"small\",\n  format,\n  label,\n  labelBorder = false,\n  labelPosition = \"right\",\n  defaultChecked,\n  cssOverrides,\n  onClick,\n  ...props\n}) => {\n  const buttonId = id ?? generateSourceId();\n  const labelId = descriptionId(buttonId);\n  const [isBrowser, setIsBrowser] = useState(false);\n  let tooltiptext = \"\";\n  const isChecked = () => {\n    if (checked != void 0) {\n      return checked;\n    }\n    return !!defaultChecked;\n  };\n  useEffect(() => {\n    setIsBrowser(true);\n  }, []);\n  if (!isBrowser) {\n    tooltiptext = \"tooltiptext\";\n  }\n  return /* @__PURE__ */ jsxs(\n    \"label\",\n    {\n      id: labelId,\n      css: [\n        labelStyles(fontSize, fontWeight, format),\n        labelBorder && labelBorderStyles(format),\n        cssOverrides\n      ],\n      ...props,\n      children: [\n        labelPosition === \"left\" && label,\n        /* @__PURE__ */ jsx(\n          \"button\",\n          {\n            id: buttonId,\n            css: [\n              buttonStyles,\n              buttonStylesMargin(labelPosition),\n              toggleStyles(format)\n            ],\n            role: \"switch\",\n            \"aria-checked\": isChecked(),\n            \"aria-labelledby\": labelId,\n            onClick\n          }\n        ),\n        labelPosition === \"right\" && label,\n        /* @__PURE__ */ jsx(\"div\", { className: tooltiptext, css: tooltipStyles, children: /* @__PURE__ */ jsx(\"span\", { children: \"Please turn on JavaScript to use this feature\" }) })\n      ]\n    }\n  );\n};\n\nexport { ToggleSwitch };\n","import { jsxs, Fragment, jsx } from '@emotion/react/jsx-runtime';\nimport { css } from '@emotion/react';\nimport { visuallyHidden } from '../../../foundations/accessibility/visually-hidden.js';\nimport { iconSize } from '../../../foundations/__generated__/size.js';\n\nconst Svg = ({ size, theme }) => /* @__PURE__ */ jsx(\n  \"svg\",\n  {\n    width: size ? iconSize[size] : void 0,\n    height: void 0,\n    viewBox: \"-3 -3 30 30\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    focusable: false,\n    \"aria-hidden\": true,\n    children: /* @__PURE__ */ jsx(\n      \"path\",\n      {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M12.019 22a9.94 9.94 0 0 0 8.223-4.35l-.114-.616-.797-.478-.615.16c-1.48 2.095-3.895 3.485-6.697 3.485-4.487 0-8.178-3.69-8.178-8.224 0-4.51 3.69-8.177 8.178-8.177 2.574 0 4.784 1.139 6.31 2.96l-3.303.548v1.138h5.831l.433-.432V2h-1.116l-.57 3.44C17.782 3.32 15.094 2 12.02 2 6.484 2 1.996 6.465 1.996 11.977A10.01 10.01 0 0 0 12.02 22\",\n        fill: theme?.fill\n      }\n    )\n  }\n);\nconst SvgReload = ({\n  size,\n  theme,\n  isAnnouncedByScreenReader = false\n}) => /* @__PURE__ */ jsxs(Fragment, { children: [\n  /* @__PURE__ */ jsx(Svg, { size, theme }),\n  isAnnouncedByScreenReader ? /* @__PURE__ */ jsx(\n    \"span\",\n    {\n      css: css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`,\n      children: \"Reload\"\n    }\n  ) : \"\"\n] });\n\nexport { SvgReload };\n"],"names":[],"sourceRoot":""}